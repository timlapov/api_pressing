security:
    role_hierarchy:
        ROLE_ADMIN: [ ROLE_EMPLOYEE ]
        ROLE_EMPLOYEE: [ ROLE_USER ]
        ROLE_USER: [ ROLE_USER ]
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\Client:
            algorithm: 'auto'
        App\Entity\Employee:
            algorithm: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_employee_provider:
            entity:
                class: App\Entity\Employee
                property: email
        app_client_provider:
            entity:
                class: App\Entity\Client
                property: email
        all_users_provider:
                chain:
                    providers: [ 'app_employee_provider', 'app_client_provider' ]
        # used to reload user from session & other features (e.g. switch_user)
    firewalls:
        api:
            pattern: ^/api/
            stateless: true
            provider: all_users_provider
            json_login:
                check_path: /api/login
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            jwt: ~
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        easyadmin:
            pattern: ^/admin
            stateless: false
            lazy: true
            provider: app_employee_provider
#            provider: all_users_provider
            form_login:
                login_path: admin_login
                check_path: admin_login
                default_target_path: admin
                username_parameter: email
                password_parameter: password
            logout:
                path: admin_logout
                target: admin

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/doc, roles: PUBLIC_ACCESS }
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        - { path: ^/api/additional_services, roles: PUBLIC_ACCESS, methods: [ GET ] }
        - { path: ^/api/categories, roles: PUBLIC_ACCESS, methods: [ GET ] }
        - { path: ^/api/cities, roles: PUBLIC_ACCESS, methods: [ GET ] }
        - { path: ^/api/clients, roles: PUBLIC_ACCESS, methods: [ POST ] }
        - { path: ^/api/countries, roles: PUBLIC_ACCESS, methods: [ GET ] }
        - { path: ^/api/employees, roles: ROLE_EMPLOYEE }
        - { path: ^/api/fabrics, roles: PUBLIC_ACCESS, methods: [ GET ] }
        - { path: ^/api/genders, roles: PUBLIC_ACCESS, methods: [ GET ] }
        - { path: ^/api/items, roles: [ROLE_USER, ROLE_EMPLOYEE] }
        - { path: ^/api/orders, roles: [ROLE_USER, ROLE_EMPLOYEE] }
        - { path: ^/api/order_statuses, roles: PUBLIC_ACCESS, methods: [ GET ] }
        - { path: ^/api/order_statuses, roles: ROLE_EMPLOYEE }
        - { path: ^/api/services, roles: PUBLIC_ACCESS, methods: [ GET ] }
        - { path: ^/api/services, roles: ROLE_ADMIN }
        - { path: ^/api/subcategories, roles: PUBLIC_ACCESS, methods: [ GET ] }
        - { path: ^/api/subcategories, roles: ROLE_ADMIN }
        - { path: ^/admin/login, roles: PUBLIC_ACCESS }
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
